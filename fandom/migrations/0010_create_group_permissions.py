# Generated by Django 4.1 on 2023-05-05 17:17


from __future__ import unicode_literals
from itertools import chain

from django.db import migrations


def populate_permissions_lists(apps):
    permission_class = apps.get_model('auth', 'Permission')

    company_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                          content_type__model='company')

    group_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                        content_type__model='group')

    style_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                        content_type__model='style')

    entertainer_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                              content_type__model='entertainer')

    entertainergroup_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                                   content_type__model='entertainergroup')

    album_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                        content_type__model='album')

    song_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                       content_type__model='song')

    role_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                       content_type__model='role')

    create_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                         content_type__model='create')

    eventcategory_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                                content_type__model='eventcategory')

    event_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                        content_type__model='event')

    activity_permissions = permission_class.objects.filter(content_type__app_label='fandom',
                                                           content_type__model='activity')

    perm_view_company = permission_class.objects.filter(content_type__app_label='fandom',
                                                        content_type__model='company',
                                                        codename='view_company')

    perm_view_group = permission_class.objects.filter(content_type__app_label='fandom',
                                                      content_type__model='group',
                                                      codename='view_group')

    perm_view_style = permission_class.objects.filter(content_type__app_label='fandom',
                                                      content_type__model='style',
                                                      codename='view_style')

    perm_view_entertainer = permission_class.objects.filter(content_type__app_label='fandom',
                                                            content_type__model='entertainer',
                                                            codename='view_entertainer')

    perm_view_entertainergroup = permission_class.objects.filter(content_type__app_label='fandom',
                                                                 content_type__model='entertainergroup',
                                                                 codename='view_entertainergroup')

    perm_view_album = permission_class.objects.filter(content_type__app_label='fandom',
                                                      content_type__model='album',
                                                      codename='view_album')

    perm_view_song = permission_class.objects.filter(content_type__app_label='fandom',
                                                     content_type__model='song',
                                                     codename='view_song')

    perm_view_role = permission_class.objects.filter(content_type__app_label='fandom',
                                                     content_type__model='role',
                                                     codename='view_role')

    perm_view_create = permission_class.objects.filter(content_type__app_label='fandom',
                                                       content_type__model='create',
                                                       codename='view_create')

    perm_view_eventcategory = permission_class.objects.filter(content_type__app_label='fandom',
                                                              content_type__model='eventcategory',
                                                              codename='view_eventcategory')

    perm_view_event = permission_class.objects.filter(content_type__app_label='fandom',
                                                      content_type__model='event',
                                                      codename='view_event')

    perm_view_activity = permission_class.objects.filter(content_type__app_label='fandom',
                                                         content_type__model='activity',
                                                         codename='view_activity')

    lv0_user_permissions = chain(perm_view_company,
                                 perm_view_style,
                                 perm_view_entertainer,
                                 perm_view_group,
                                 perm_view_entertainergroup,
                                 perm_view_album,
                                 perm_view_song,
                                 perm_view_role,
                                 perm_view_create,
                                 perm_view_eventcategory,
                                 perm_view_event,
                                 perm_view_activity)

    lv1_user_permissions = chain(perm_view_company,
                                 perm_view_style,
                                 perm_view_entertainer,
                                 perm_view_group,
                                 perm_view_entertainergroup,
                                 perm_view_album,
                                 perm_view_song,
                                 perm_view_role,
                                 perm_view_create,
                                 perm_view_eventcategory,
                                 event_permissions,
                                 activity_permissions)

    lv2_user_permissions = chain(perm_view_company,
                                 perm_view_style,
                                 perm_view_entertainer,
                                 perm_view_group,
                                 perm_view_entertainergroup,
                                 album_permissions,
                                 song_permissions,
                                 perm_view_role,
                                 create_permissions,
                                 perm_view_eventcategory,
                                 event_permissions,
                                 activity_permissions)

    lv3_user_permissions = chain(perm_view_company,
                                 perm_view_style,
                                 entertainer_permissions,
                                 group_permissions,
                                 entertainergroup_permissions,
                                 album_permissions,
                                 song_permissions,
                                 perm_view_role,
                                 create_permissions,
                                 perm_view_eventcategory,
                                 event_permissions,
                                 activity_permissions)

    admin_permissions = chain(company_permissions,
                              style_permissions,
                              entertainer_permissions,
                              group_permissions,
                              entertainergroup_permissions,
                              album_permissions,
                              song_permissions,
                              role_permissions,
                              create_permissions,
                              eventcategory_permissions,
                              event_permissions,
                              activity_permissions)

    my_groups_initialization_list = [
        {
            "name": "admin",
            "permissions_list": admin_permissions,
        },
        {
            "name": "lv3_user",
            "permissions_list": lv3_user_permissions,
        },
        {
            "name": "lv2_user",
            "permissions_list": lv2_user_permissions,
        },
        {
            "name": "lv1_user",
            "permissions_list": lv1_user_permissions,
        },
        {
            "name": "lv0_user",
            "permissions_list": lv0_user_permissions,
        },
    ]
    return my_groups_initialization_list


def add_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    group_model_class = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = group_model_class.objects.get(
                name=group['name']
            )
            group_object.permissions.set(group['permissions_list'])
            group_object.save()


def remove_group_permissions_data(apps, schema_editor):
    groups_initialization_list = populate_permissions_lists(apps)

    group_model_class = apps.get_model('auth', 'Group')
    for group in groups_initialization_list:
        if group['permissions_list'] is not None:
            group_object = group_model_class.objects.get(
                name=group['name']
            )
            list_of_permissions = group['permissions_list']
            for permission in list_of_permissions:
                group_object.permissions.remove(permission)
                group_object.save()


class Migration(migrations.Migration):
    dependencies = [
        ("fandom", "0009_create_groups"),
    ]

    operations = [
        migrations.RunPython(
            add_group_permissions_data,
            remove_group_permissions_data
        )
    ]
